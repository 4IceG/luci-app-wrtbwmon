<%#
 Licensed to the public under the Apache License 2.0.
-%>

<%
	local fs = require "nixio.fs"
	local stat = require "luci.tools.status"
	local dba = luci.model.uci.cursor():get("wrtbwmon", "general", "path")

--	Function to generate table from string.
	local function strToTable(str)
		local tb = {}
		local cmd = nil
		setmetatable(tb, {__index = table.insert})
		str:gsub("[^%s,]+", tb)
		tb.__index = nil
		return tb
	end

--	Function to update the mac-hostname table.
	local function getmactable(family)
		local mactable = {}
		local leases = (family == 4 and {stat.dhcp_leases()} or {stat.dhcp6_leases()})[1]

		if fs.access("/etc/wrtbwmon.user") then
			for line in io.lines("/etc/wrtbwmon.user") do
				local macpair = strToTable(line)
				mactable[macpair[1]:lower()] = macpair[2]
			end
		end

		for _, line in pairs(leases) do
			if line.macaddr and not mactable[line.macaddr:lower()] then
				mactable[line.macaddr:lower()] = line.hostname
			end
		end

		return mactable
	end

--	Rename the db file for ipv6.
	local function fileRename(fn, tag)
		local idx = fn:match(".+()%.%w+$")
		if(idx) then
			return fn:sub(1, idx-1) .. tag .. fn:sub(idx, -1)
		else
			return fn .. tag
		end
	end

	local function procressData(db, family)
		local dbc = (family == 6 and {fileRename(db, ".6")} or {db})[1]
		local cmd_setup = "/etc/init.d/wrtbwmon restart"
		local cmd_update = "wrtbwmon -" .. family .. " -f " .. db .. " >>/dev/null 2>&1"
		local data, mactable, firstline = {}, getmactable(family), true
		local uptime = tonumber(luci.sys.exec("cat /proc/uptime | awk '{print $1}'"))  or 0
		local isshow = luci.http.formvalue("isShow")

--		Setup the background update process.
		if not fs.access("/var/run/wrtbwmon.pid") then
			io.popen(cmd_setup)
		else
			io.popen(cmd_update)
		end

--		Caculate the update time and update the database.
		if nixio.fs.access("/var/log/wrtbwmon.log") then
			uptime = tonumber(luci.sys.exec("awk -F, '{print $1}' /var/log/wrtbwmon.log"))
		end

--		Process the database.
		for line in io.lines(dbc) do
			if firstline then
				firstline = false
			else
				local tbl = strToTable(line)
				if isshow == "1" or tbl[8] ~= "0" then
					tbl[1] = tbl[1]:lower()

					if mactable[tbl[1]] then
						tbl[3] = mactable[tbl[1]]
					else
						tbl[3] = tbl[1]
					end

					data[#data+1] = {tbl[3], tbl[1], unpack(tbl, 4)}
					table.insert(data[#data], tbl[2])
				end
			end
		end

--		Transfer the database to js.
		luci.http.prepare_content("application/json")
		luci.http.write_json({data = data, uptime = uptime})
		return
	end

	if  luci.http.formvalue("proto") == "ipv4" then
		procressData(dba, 4)
		return
	elseif  luci.http.formvalue("proto") == "ipv6" then
		procressData(dba, 6)
		return
	end

	if  luci.http.formvalue("reset") == "1" then
		os.execute("ip -4 neigh flush dev br-lan && ip -6 neigh flush dev br-lan")
		os.execute("rm -f " .. fileRename(dba, "*") .. " && wrtbwmon -46 -f " .. dba .. " >>/dev/null 2>&1")
		luci.http.status(200, "OK")
		return
	end
-%>

<%+header%>

<style>
	.showMore.hide {
		display: none;
	}

	.tr.table-totals {
		background: #eee !important;
	}
</style>

<div class="cbi-map">
	<h2><%:Usage - Details%></h2>

	<div class="cbi-section">
		<div class="table">
			<div class="tr">
				<div class="td left" style="width:10%">
					<label><%:protocol:%></label>
				</div>
				<div class="td left" style="width:30%">
					<select id="Select46" style="width:auto">
						<option value="ipv4"  selected="selected" >ipv4</option>
						<option value="ipv6">ipv6</option>
					</select>
				</div>
				<div class="td left" style="width:10%">
					<label for="isShow" style="vertical-align:middle;"><%:Show Zeros:%></label>
				</div>
				<div class="td left" style="width:30%">
					<input class="cbi-input-checkbox" type="checkbox" id="isShow"/>
				</div>
				<div class="td right">
					<input id="resetDatabase" type="button" class="cbi-button" value="<%:Reset Database%>" >
				</div>
			</div>
			<div class="tr">
				<div class="td left" style="width:10%"><label><%:bandwidth:%></label></div>
				<div class="td left" style="width:30%">
					<input type="text" id="setBD" value="1M" />
					<label id="checkBD"></label>
				</div>
				<div class="td left" style="width:10%">
					<label for="showMore" style="vertical-align:middle;"><%:Show More:%></label>
				</div>
				<div class="td left" style="width:30%">
					<input class="cbi-input-checkbox" type="checkbox" id="showMore"/>
				</div>
				<div class="td"></div>
			</div>
		</div>
	</div>

	<div class="cbi-section">
		<div class="table">
			<div class="tr">
				<div class="td left" style="width:70%">
					<small><div id="updated" style="display:inline"></div><div id="updating" style="display:inline"></div></small>
				</div>
				<div class="td right" style="width:30%">
					<label for="intervalSelect"><%:Auto update every%></label>
					<select id="intervalSelect">
						<option value="-1"><%:Disabled%></option>
						<option value="1"><%:1 second%></option>
						<option value="2"  selected="selected"><%:2 seconds%></option>
						<option value="5"><%:5 seconds%></option>
						<option value="10"><%:10 seconds%></option>
						<option value="20"><%:20 seconds%></option>
						<option value="30"><%:30 seconds%></option>
						<option value="60"><%:60 seconds%></option>
						<option value="120"><%:2 minutes%></option>
					</select>
				</div>
			</div>
		</div>

		<div class="table">
			<div class="tr"><div class="td left" style="width:10%"><%:downflow:%></div><div class="td left" id="downflow">-</div></div>
			<div class="tr"><div class="td left" style="width:10%"><%:upflow:%></div><div class="td left" id="upflow">-</div></div>
		</div>

		<div class="table" id="traffic">
			<div class="tr table-titles">
				<div class="th" id="thClient" style="width:17%"><%:Clients%></div>
				<div class="th showMore hide" id="thMAC" style="width:10%"><%:MAC%></div>
				<div class="th" id="thDownload" style="width:8%"><%:Download%></div>
				<div class="th" id="thUpload" style="width:8%"><%:Upload%></div>
				<div class="th" id="thTotalDown" style="width:9%"><%:Total Down%></div>
				<div class="th" id="thTotalUp" style="width:9%"><%:Total Up%></div>
				<div class="th" id="thTotal" style="width:9%"><%:Total%></div>
				<div class="th showMore hide" id="thFirstSeen" style="width:15%"><%:First Seen%></div>
				<div class="th showMore hide" id="thLastSeen" style="width:15%"><%:Last Seen%></div>
			</div>
			<div class="tr placeholder">
				<div class="td"><em><%:Collecting data...%></em></div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">//<![CDATA[

(function () {
	var scheduleTimeout, updateTimeout, isScheduled = true;
	var sortedColumn = 6, sortDirection = "desc";
	var oldValues = {
			cachedData: 	[],
			cacheSaved:	[],
			cacheDate:  ""
	};

	function parseSize(size){
		var num = parseFloat((size).match(/^[0-9]+\.?[0-9]*/g));
		var base = (size).match(/[KMGTPEZ]/i).toString();
		var unit = ["" , "K", "M", "G", "T", "P", "E", "Z"];
		var ex = unit.indexOf(base);

		return Math.round((num ? num : 1) * (ex != "-1" ? 1024 ** ex : 1));
	}

	function padstr(str) {
		return str < 10 ? '0' + str : str;
	}

	function dateToString(date) {
		var d = new Date((/\W/g).test(date) ? date : date * 1000);
		var Y = d.getFullYear(), M = d.getMonth() + 1, D = d.getDate();
		var hh = d.getHours(), mm = d.getMinutes(), ss = d.getSeconds();
		return Y + '/' + padstr(M) + '/' + padstr(D) + ' ' + padstr(hh) + ':' + padstr(mm) + ':' + padstr(ss);
	}

	function isArray(obj) {
		return obj instanceof Array;
	}

	function handleError() {
		// TODO handle errors
		// var message = 'Something went wrong...';
	}

	function parseValues(values, now){
		// check if data is array
		if (!isArray(values)) return [''];

		var valArr = [], totals = [0, 0, 0, 0, 0];
		var rowNum = values.length;
		for (var i = 0; i < rowNum ; i++) {
			var rowArr = handleRow(values[i], now);
			valArr.push(rowArr);

			for (var j = 0; j < totals.length; j++) {
				totals[j] += parseInt(rowArr[2 + j]);
			}
		}

		return [valArr, totals];
	}

	function handleRow(data, now) {
		// check if data is array
		if (!isArray(data)) return [''];

		// extract old data
		var oldSaved = oldValues.cacheSaved;
		var oldDate = oldValues.cacheDate;
		var dlSpeed = 0, upSpeed = 0;
		if (oldSaved[data[0]]) {
			var seconds = ( now - oldDate ) || $('intervalSelect').value;
			dlSpeed = Math.round((data[2] - oldSaved[data[0]][0]) / seconds);
			upSpeed = Math.round((data[3] - oldSaved[data[0]][1]) / seconds);
		}

		oldValues.cacheSaved[data[0]] = [data[2], data[3]];
		data.splice(2, 0, dlSpeed.toString(), upSpeed.toString());

		return data;
	}

	function displayTable(values) {
		var bandwidth = parseSize($('setBD').value);
		var tb = $('traffic');
		values[0].sort(sortingFunction);

//		display data
//		console.time('update_table');
		updateTable(tb, values, '<em><%:Loading...%></em>');
//		console.timeEnd('update_table');

		$('downflow').innerHTML = progressbar(values[1][0], bandwidth);
		$('upflow').innerHTML = progressbar(values[1][1], bandwidth);
		return
	}

	function updateTable(tb, values, placeholder) {
		var dom = document.createDocumentFragment(), nodeLen = tb.childElementCount - 2;
		var tbData = values[0], shadowNode, newNode, childTD, tabTitle = tb.firstElementChild;
		var showMore = $('showMore').checked;
		// Create the shadow node, which will be used in the following.
		if (tbData.length > nodeLen) {
			if (tb.childElementCount > 2) {
				shadowNode = tabTitle.nextElementSibling.cloneNode(true);
			} else {
				shadowNode = document.createElement('div');
				childTD = document.createElement('div');
				childTD.appendChild(document.createTextNode(''));
				for (var j = 0; j < tabTitle.children.length; j++) {
					childTD.className = 'td' + (!showMore && '178'.indexOf(j) != -1 ? ' hide showMore' : '');
					childTD.setAttribute('data-title', tabTitle.children[j].innerHTML);
					shadowNode.appendChild(childTD.cloneNode(true));
				}
				shadowNode.firstElementChild.appendChild(document.createElement('br'));
				shadowNode.firstElementChild.appendChild(document.createTextNode(''));
			}
		}
		// Update the table data.
		for (var i = 0; i < tbData.length; i++) {
			if (i < nodeLen) {
				newNode = tabTitle.nextElementSibling;
			} else {
				newNode = shadowNode.cloneNode(true);
				newNode.className = 'tr cbi-rowstyle-%d'.format(i % 2 ? 2 : 1);
			}
			childTD = newNode.firstElementChild;
			childTD.title = tbData[i][1];
			childTD.lastChild.nodeValue = tbData[i].slice(-1);
			for (var j = 0; j < tabTitle.childElementCount; j++, childTD = childTD.nextElementSibling){
				childTD.firstChild.nodeValue = ('23456'.indexOf(j) != -1 ?
					'%1024.2mB' + ('23'.indexOf(j) != -1  ? '/s' : '') :
					'%s').format('78'.indexOf(j) != -1 ? dateToString(tbData[i][j]) : tbData[i][j]);
			}
			dom.appendChild(newNode);
		}
		// Remove the table data which has been deleted from the database.
		while (tb.childElementCount > 2) {
			tb.removeChild(tabTitle.nextElementSibling);
		}
		//Append the totals or placeholder row.
		dom.appendChild(tb.lastElementChild);
		newNode = dom.lastElementChild;
		if (newNode.classList.contains('table-totals')) {
			if (tbData.length == 0) {
				while (newNode.firstElementChild.firstChild.nextSibling) {
					newNode.removeChild(newNode.lastElementChild);
				};
				newNode.className = 'tr placeholder';
				newNode.firstChild.innerHTML = placeholder;
			}
		} else {
			if (tbData.length > 0) {
				dom.replaceChild(shadowNode.cloneNode(true), newNode);
				newNode = dom.lastElementChild;
				newNode.className = 'tr table-totals';
				while (newNode.firstElementChild.firstChild.nextSibling) {
					newNode.firstElementChild.removeChild(newNode.firstElementChild.lastChild);
				};
				newNode.firstElementChild.style.fontWeight = 'bold';
				newNode.firstElementChild.nextSibling.style.fontWeight = 'bold';
			}
		}

		if (newNode.classList.contains('table-totals')) {
			newNode.firstElementChild.firstChild.nodeValue = !showMore ? '<%:TOTAL%>: ' + tbData.length : '<%:TOTAL%>:';
			newNode.firstElementChild.nextSibling.firstChild.nodeValue = !showMore ? '' : tbData.length + ' <%:Clients%>';
			for (var j = 0; j < values[1].length; j++) {
				newNode.children[j + 2].firstChild.nodeValue = '%1024.2mB'.format(values[1][j]) + (j < 2 ? '/s' : '');
			}
		}
		tb.appendChild(dom);
	}

	function sortingFunction(x, y){
		var byCol = x[sortedColumn] == y[sortedColumn] ? 1 : sortedColumn;
		var n1 = x[byCol], n2 = y[byCol];
		var flag = sortDirection =="desc" ? 1 : -1;
		var toHex = false;
		var a = n1.split(/[^\w\d]/g), b = n2.split(/[^\w\d]/g);

		if ( byCol == "9" ) {
			var ipCk1 = cbi_validators.ipaddr.apply(n1) ? 1 : 0;
			var ipCk2 = cbi_validators.ipaddr.apply(n2) ? 1 : 0;

			if (ipCk1 * ipCk2 == 0) {
				return (ipCk2 - ipCk1) * flag;
			} else {
				a = cbi_validators.ip6addr.apply(n1) ? (toHex = true, IPv6(n1)) : a;
				b = cbi_validators.ip6addr.apply(n2) ? (toHex = true, IPv6(n2)) : b;
			}
		}

		var len = (a.length <= b.length ? a.length : b.length);
		var num1, num2;

		for (var i = 0 ; i < len ; i++ ) {
			if (byCol == "1" || (byCol == "9" && toHex)) {
				num1 = parseInt(a[i], 16);
				num2 = parseInt(b[i], 16);
			} else if (a[i].match(/[a-z]/ig) || b[i].match(/[a-z]/ig)){
				num1 = a[i].toLowerCase();
				num2 = b[i].toLowerCase();
			} else {
				num1 = parseInt(a[i]);
				num2 = parseInt(b[i]);
			}

			if (num1 != num2) return ((num2 - num1) * flag);
		}
		return flag ;
	}

	function progressbar(v, m){
		var vn = parseInt(v) || 0;
		var mn = parseInt(m) || 100;
		var pc = ((100 / mn) * vn).toFixed(2);
		var wt = Math.floor(pc > 100 ? 100 : pc);
		var bkc = (pc >= 95 ? "red" : (pc >= 80 ? "magenta" : (pc >= 60 ? "yellow" : "lime")));

		return String.format(
			'<div style="width:100%%; position:relative; border:1px solid #999999">' +
				'<div style="background-color: %s; width:%d%%; height:15px">' +
					'<div style="position:absolute; left:0; top:0; text-align:center; width:100%%; color:#000000">' +
						'<small>%1024.2mB/s (%f%%)</small>' +
					'</div>' +
				'</div>' +
			'</div>', bkc, wt, vn, pc
		);
	}

	function $(tid) {
		return document.getElementById(tid);
	}

	function registerTableEventHandlers() {
		$('traffic').querySelectorAll('.th').forEach( function(e) {
			if (e) {
				e.addEventListener('click', function () {
					setSortColumn(this.id);
				});
			}
		});

		$('intervalSelect').addEventListener('change', function () {
			interval = this.value;
			if (interval > 0) {
				// it is not scheduled, schedule it
				if (!isScheduled) {
					reschedule(interval);
				}
			} else {
				// stop the scheduling
				stopSchedule();
			}
		});

		$('resetDatabase').addEventListener('click', function () {
			if (confirm('<%:This will delete the database file. Are you sure?%>')) {
				(new XHR()).post('<%=REQUEST_URI%>', {reset: 1}, function(xhr) {
					document.location.reload();
				})
			}
		});

		$('setBD').addEventListener('input', function () {
			var strTest = (/^[0-9]+\.?[0-9]*[\s]*[KMGTP]?B?(\/s)?$/g).test(this.value);
			$("checkBD").innerHTML = strTest ? '\u2714' : '\u2716';
		});

		$('setBD').addEventListener('focusout', function () {
			if ($("checkBD").innerHTML == '\u2716') {
				alert('Error! Bandwidth reset!!!');
				this.value = '1M';
			}
			$("checkBD").innerHTML = "";
		});

		$('Select46').addEventListener('change', function () {
			XHR._q[0].data["proto"] = this.value;
		});

		$('isShow').addEventListener('click', function () {
			XHR._q[0].data["isShow"] = this.checked ? 1 : 0;
		});

		$('showMore').addEventListener('click', function () {
			var tot = document.querySelector('.tr.table-totals').firstElementChild;
			var showMore = this.checked;
			tot.firstChild.nodeValue = '<%:TOTAL%>:' + (showMore ? '' : ' ' + oldValues.cachedData[0].length);
			tot.nextElementSibling.firstChild.nodeValue = showMore ? oldValues.cachedData[0].length + ' <%:Clients%>' : '';
			document.querySelectorAll('.showMore').forEach(function(e) {
				if(e) {
					showMore ? e.classList.remove('hide') :e.classList.add('hide');
				}
			});
			if (!showMore && "178".indexOf(sortedColumn)!= -1) setSortColumn("thTotal");
		});
	}

	function updateData(once) {
		var interval = $('intervalSelect').value;
		var status = {
			proto: $('Select46').value,
			isShow: 0
		}

		XHR.get('<%=REQUEST_URI%>', status,function(x, info){
			if (!info) {
				handleError();
			} else {
				// set old values
				oldValues.cachedData = parseValues(info.data, info.uptime);
				oldValues.cacheDate = info.uptime;
				// update the html
				setSortColumn(null);
				$('updated').innerHTML = '<%:Last updated %>' + dateToString(Math.round(Date.now() / 1000)) +'<%:.%> ';

				if (!once && interval > 0) reschedule(interval);
			}
		});
	}

	function stopSchedule() {
		window.clearTimeout(scheduleTimeout);
		window.clearTimeout(updateTimeout);
		setUpdateMessage('');
		isScheduled = false;
	}

	function reschedule(seconds) {
		isScheduled = true;
		seconds = seconds || 60;
		updateSeconds(seconds);
		scheduleTimeout = window.setTimeout(updateData, seconds * 1000);
	}

	function setUpdateMessage(msg) {
		$('updating').innerHTML = msg;
	}

	function updateSeconds(start) {
		setUpdateMessage('<%:Updating again in%> <b>' + start + '</b> <%:seconds.%>');
		if (start > 0) {
			updateTimeout = window.setTimeout(function () {
				updateSeconds(start - 1);
			}, 1000);
		}
	}

	function setUpdateMessage(msg) {
		$('updating').innerHTML = msg;
	}

	function setSortColumn(eltid) {
		var label = ["", "thMAC", "thDownload", "thUpload", "thTotalDown", "thTotalUp", "thTotal", "thFirstSeen", "thLastSeen", "thClient"];
		// Remove the old sorted sign.
		var e = $(label[sortedColumn]);
		if (e)
			e.innerHTML = e.innerHTML.replace(/\u25B2|\u25BC/, "");

		// Toggle the sort direction.
		if (eltid) {
			if ( label.indexOf(eltid) == sortedColumn ) {
				sortDirection = (sortDirection == "desc") ? "asc" : "desc";
			} else {
				sortDirection = "desc";
				sortedColumn = label.indexOf(eltid);
			}
		}

		e = $(label[sortedColumn]);
		if (e)
			e.innerHTML += (sortDirection == "asc" ? "\u25B2" : "\u25BC");

		// Display the sorted values.
		displayTable(oldValues.cachedData);
	}

	if (<%=luci.http.write_json(io.popen("opkg status wrtbwmon") == "")%>) {
		alert("<%:wrtbwmon is not installed!%>");
	} else {
		registerTableEventHandlers();
		updateData();
	}

	return 0;
})();
//]]></script>

<%+footer%>

