<%#
 Licensed to the public under the Apache License 2.0.
-%>

<%
	local fs = require "nixio.fs"
	local stat = require "luci.tools.status"
	local cursor = luci.model.uci.cursor()
	local dbPath = cursor:get("wrtbwmon", "general", "path")

	if luci.http.formvalue("defFile") == "1" then
		local def = tostring(fs.readfile("/etc/wrtbwmon.user")) or ""

		luci.http.prepare_content("application/json")
		luci.http.write_json(def)
		return
	end

	if luci.http.formvalue("leasesFile") == "1" then
		local leases = stat.dhcp_leases(),

		luci.http.prepare_content("application/json")
		luci.http.write_json(leases)
		return

	end

	if  luci.http.formvalue("checkdency") == "1" then
		if require("luci.model.ipkg").installed("wrtbwmon") then
			luci.http.prepare_content("application/json")
			luci.http.write_json("1")
			return
		end

	end

	if luci.http.formvalue("proto") ~= nil then
		local cmd_S = "wrtbwmon -b -46 -f " .. dbPath .. " -p /tmp/usage.htm -u /etc/wrtbwmon.user >> /dev/null 2>&1 &"
		local intv = tonumber(luci.http.formvalue("interval")) or 0
		local upTime = tonumber(luci.sys.exec("cat /proc/uptime | awk '{print $1}'"))  or 0
		local flag = 0
		local cmd_P = nil
		local dbFile = nil
		local rv = {
			rvtime = upTime,
			rvdata = ""
		}

		if not fs.access("/var/log/wrtbwmon.log") then
			file = io.open("/var/log/wrtbwmon.log","w+")
			file:write(upTime .. "," .. intv)
			file:close("/var/log/wrtbwmon.log")
		else
			local oldTime = tonumber(luci.sys.exec("awk -F, '{print $1}' /var/log/wrtbwmon.log"))
			if (upTime-oldTime)<0.2 then
				rv.rvtime = oldTime
			else
				flag = 1
				luci.sys.call("echo " .. upTime .. "," .. intv .. " >/var/log/wrtbwmon.log" )
			end
		end

		if  luci.http.formvalue("proto") == "ipv4" then
			cmd_P = "wrtbwmon -4 -f " .. dbPath
			dbFile = dbPath

		elseif  luci.http.formvalue("proto") == "ipv6" then
			cmd_P = "wrtbwmon -6 -f " .. dbPath
			dbFile = dbPath .. "6"
--[[
		elseif  luci.http.formvalue("ipv46") == "ipv46" then
			cmd_P = "wrtbwmon -46 -f " .. dbPath
			dbFile = dbPath .. "46"
]]--
		end

		if not nixio.fs.access("/var/run/wrtbwmon.pid") then
			luci.sys.call(cmd_S)
		else
			if(flag==1) then
				luci.sys.call(cmd_P)
			end
		end

		rv.rvdata = tostring(fs.readfile(dbFile)) or ""
		luci.http.prepare_content("application/json")
		luci.http.write_json(rv)
		return
	end

	if  luci.http.formvalue("reset") == "1" then
		local ret = luci.sys.call("wrtbwmon -f " .. dbPath .. " && rm " .. dbPath .. " && rm " .. dbPath .. "6")
		luci.sys.call("ip -4 neigh flush dev br-lan && ip -6 neigh flush dev br-lan")
		return
	end

-%>

<%+header%>

<fieldset class="cbi-section">

	<legend><%:Usage - Details%></legend>

	<div class="table" style="width:100%">
		<div class="tr left">
			<div class="td left" style="width:30%">
				<label><%:protocol:%></></label>
				<select id="Select46" >
					<option value="ipv4"  selected="selected" >ipv4</option>
					<option value="ipv6">ipv6</option>
					<!--option value="ipv46">ipv6 && ipv6</option-->
				</select>
			</div>
			<div class="td middle" style="width:20%">
				<label for="isShow" style="vertical-align:middle;"><%:Show Zeros%></label>
				<input id="isShow" type="checkbox" name="showing" style="vertical-align:middle;"/>
			</div>
			<div class="td middle" style="width:40%">
				<label><%:Bandwidth%></label>
				<input type="text" id="setBD" value="1M" />
				<label id="checkBD"></label>
			</div>
			<div class="td right" style="width:10%">
				<input id="resetDatabase" type="button" class="cbi-button" style="right: 0;bottom: 0;" value="<%:Reset Database%>" >
			</div>
		</div>
	</div>

	<div class="table" style="width:100%">
		<div class="tr">
			<div class="td left" style="width:70%">
				<small><span id="updated"></span><span id="updating"></span></small>
			</div>
			<div class="td right" style="width:30%">
				<label><%:Auto update every%></label>
				<select id="intervalSelect">
					<option value="-1"><%:Disabled%></option>
					<option value="1"><%:1 second%></option>
					<option value="2"  selected="selected"><%:2 seconds%></option>
					<option value="5"><%:5 seconds%></option>
					<option value="10"><%:10 seconds%></option>
					<option value="20"><%:20 seconds%></option>
					<option value="30"><%:30 seconds%></option>
					<option value="40"><%:40 seconds%></option>
					<option value="50"><%:50 seconds%></option>
					<option value="60"><%:60 seconds%></option>
					<option value="120"><%:2 minutes%></option>
					<option value="180"><%:3 minutes%></option>
				</select>
			</div>
		</div>
	</div>

	<div class="table" style="width:100%">
		<div class="tr"><div class="td left" style="width:5%"><%:downflow:%></div><div class="td left" id="downflow">-</div></div>
		<div class="tr"><div class="td left" style="width:5%"><%:upflow:%></div><div class="td left" id="upflow">-</div></div>
	</div>

	<div class="table" style="width:100%">
		<div class="tbody" id="tableBody">
			<div class="tr"><div class="td"><%:Loading...%></div></div>
		</div>
	</div>
</fieldset>

<script type="text/javascript">//<![CDATA[

(function () {
	var uPS, tagHalt;
	var defArr = [], leasesArr = [];
	var bandwidth = 1048576, isShowZero = 0;
	var interval = document.getElementById('intervalSelect').value;
	var sortedColumn = 7, sortedEltId = "thTotal", sortDirection = "desc";
	var oldValues = {
			cacheData: {
				oldData:   [],
				oldTotals: ""
			},
			cacheDate: ""
	};
	var tDebug;

	function getSize(size) {
		var prefix = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z'];
		var precision, base = 1024, pos = 0;
		while (size > base) {
			size /= base;
			pos++;
		}
		if (pos > 1) precision = 100; else precision = 1;
		return [ Math.round(size * precision) / precision , prefix[pos] + 'B' ];
	}

	function parseSize(size){
		var strTest = (/^[0-9]+\.?[0-9]*[\s]*[KMGTP]?$/g).test(size);
		if (!strTest) {
			return -1;
		}else{
			var num = (size).match(/^[0-9]+\.?[0-9]*/g);
			var base = (size).match(/[KMGTP]?$/);
			var unitBD = ["" , "K","M" , "G","T" , "P"]
			for (i = 0; i < unitBD.length; i++){
				 if (base == unitBD[i]){
					 base = 1024**i;
					 break;
				 }
				 if (!base)
					 base = 1;
			}
			bandwidth = Math.round(parseFloat(num) * base);
		}
		return bandwidth;
	}

	function dateToString(date) {
		return date.toLocaleString().replace(/(^\s*)|(\s*$)/g, "");
	}

	function isArray(obj) {
		return obj instanceof Array;
	}

	function handleError() {
		// TODO handle errors
		// var message = 'Something went wrong...';
	}

	function parseValues(values, now){

		var valToRows = (values.replace(/(^\s*)|(\s*$)/g, "")).split(/\r?\n|\r/g);
		valToRows.shift();

		var valArr = [], totals = [0, 0, 0, 0, 0];
		var rowNum = valToRows.length;
		for (var i = 0; i < rowNum ; i++) {
			var rowToArr = valToRows[i].split(',');

			if ( isShowZero || parseInt(rowToArr[5]) != 0 ) {
				var rowArr = handleRow(rowToArr, now);
				valArr.push(rowArr);

				for (var j = 0; j < totals.length; j++) {
					totals[j] += parseInt(rowArr[3 + j]);
				}
			}
		}
/*		if (!tDebug){
			tDebug = (now - oldValues.cacheDate);
		}else if ((now - oldValues.cacheDate)<tDebug) {
			tDebug = now - oldValues.cacheDate;
		}
		console.log(tDebug);*/
		valArr.sort(sortingFunction);
		return [valArr, totals];
	}

	function handleRow(data, now) {
		// check if data is array
		if (!isArray(data)) return [''];

		// extract old data
		var oldData = oldValues.cacheData.oldData;
		var oldDate = oldValues.cacheDate;

		// caculate download and upload speeds
		var flag, dlSpeed = 0, upSpeed = 0;
		for (var i = 0; i < oldData.length && !flag; i++) {
			// compare mac addresses and ip addresses
			if (oldData[i][0] === data[0] && oldData[i][1] === data[1]) {
				oldRowNum = i;
				seconds = ( now - oldDate ) || interval;
				dlSpeed = (data[3] - oldData[i][5]) / seconds;
				upSpeed = (data[4] - oldData[i][6]) / seconds;

				data.splice(2, 1, oldData[i][2]);
				oldValues.cacheData.oldData.splice(i, 1);
				flag = 1;
			}
		}

		if (!flag){
			data = parseHostname(data);
		}

		data.splice(3, 0, dlSpeed.toString(), upSpeed.toString());

		return data;
	}

	function DisplayTable(allData){
		data = allData[0];
		totals = allData[1];
		// display data
		var result =
			createTH('<%:Clients%>', {id: 'thClient', width: '17%'}) +
			createTH('<%:MAC%>', {id: 'thMAC', width: '10%'}) +
			createTH('<%:Download%>', {id: 'thDownload', width: '8%'}) +
			createTH('<%:Upload%>', {id: 'thUpload', width: '8%'}) +
			createTH('<%:Total Down%>', {id: 'thTotalDown', width: '9%'}) +
			createTH('<%:Total Up%>', {id: 'thTotalUp', width: '9%'}) +
			createTH('<%:Total%>', {id: 'thTotal', width: '9%'}) +
			createTH('<%:First Seen%>', {id: 'thFirstSeen', width: '15%'}) +
			createTH('<%:Last Seen%>', {id: 'thLastSeen', width: '15%'});
		result = createTR(result);

		for (var k = 0; k < data.length; k++) {
			// create displayRow
			var displayRow =
				creatTD(data[k][2] + '<br />' + data[k][1], {title: data[k][1], align: "middle"}) +
				creatTD(data[k][0], {align: "middle"}) +
				creatTD(getSize(data[k][3]).join(' ') + '/s', {align: "middle"}) +
				creatTD(getSize(data[k][4]).join(' ') + '/s', {align: "middle"}) +
				creatTD(getSize(data[k][5]).join(' '), {align: "middle"}) +
				creatTD(getSize(data[k][6]).join(' '), {align: "middle"}) +
				creatTD(getSize(data[k][7]).join(' '), {align: "middle"}) +
				creatTD(data[k][8], {align: "middle"}) +
				creatTD(data[k][9], {align: "middle"});

			result += createTR(displayRow);
		}

		var totalsRow =
		createTH('<%:TOTAL%>',{}) +
		createTH(data.length + ' <%:Clients%>',{});

		for (var m = 0; m < totals.length; m++) {
			totalsRow += creatTD(getSize(totals[m]).join(' ') + (m < 2 ? '/s' : ''), {align: "middle"});
		}
		result += createTR(totalsRow);

		document.getElementById('downflow').innerHTML = progressbar(totals[0],bandwidth);
		document.getElementById('upflow').innerHTML = progressbar(totals[1],bandwidth);
		document.getElementById('tableBody').innerHTML = result;
		return 0;
	}

	function parseHostname(data){
		var flag;

		for (var i = 0; i < defArr.length; i++) {
			// Get the HostName
			if (defArr[i][0] === data[0]) {
				data[2] = defArr[i][1];
				flag = 1;
				break;
			}
		}

		if (!flag){
			initLeasesFile();
			for (var i = 0; i < leasesArr.length; i++) {
			// Get the HostName
				if (leasesArr[i][0] === data[0]) {
					if (!leasesArr[i][1]){
						data[2] = data[0];
					}else{
						data[2] = leasesArr[i][1];
					}
					flag = 1;
					break;
				}
			}
		}

		if (!flag){
			data[2] = data[0];
		}
		return data;
	}

	function creatTD(content, opts){
		opts = opts || {};
		var res = '<div';
		if (opts.title) {
			res += ' title="' + opts.title + '"';
		}
		res += ' class="td ';
		if (opts.align) {
			//res += ' align="' + opts.align + '"';
			res += ' ' + opts.align + '">' ;
		}else{
			res += '">';
		}
		res += content;
		res += '</div>';
		return res;
	}

	function createTH(content, opts) {
		opts = opts || {};
		var res = '<div';
		if (opts.title) {
			res += ' title="' + opts.title + '"';
		}
		if (opts.id) {
			res += ' id="' + opts.id + '"';
		}
		if (opts.width) {
			res += ' style='+ '"' + 'width:' + opts.width + '"';
		}
		res += ' class="th';
		if (opts.align) {
			//res += ' align="' + opts.align + '"';
			res += ' ' + opts.align + '">' ;
		}else{
			res += '">';
		}
		res += content ;
		res += '</div>';
		return res;
	}

    function createTR(content) {
   		var res = '<div';
		res += ' class="tr">';
		res += content;
		res += '</div>';

		return res;
	}

	function sortingFunction(x,y){
		var byCol,byDirection = sortDirection;
		if (  x[sortedColumn] == y[sortedColumn] ){
			if (  x[7] != 0 || y[7] !=0 ) {
				byCol = 7;
			}else {
				byCol = 0;
			}
		}
		else{
			byCol = sortedColumn;
		}

		var n1 = (x[byCol]).toLowerCase(), n2 = (y[byCol]).toLowerCase();
		var a = n1.split(/[^\w\d]/g), b = n2.split(/[^\w\d]/g);
		var flag = ( byDirection =="desc" ? 1 : -1);
		var len = (a.length <= b.length ? a.length : b.length);

		var tag=""
		if ( n1.match(/\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}/i) ){
			tag = "MAC"
		}
		else if ( n1.match(/\d+\.\d+\.\d+\.\d+/i) ){
			tag = "IP"
		}

		for (i = 0 ; i < len ; i++ ){
			if ( tag == "MAC" ){
				num1=parseInt(a[i],16);
				num2=parseInt(b[i],16);
			}else if ( tag == "IP" ){
				num1=parseInt(a[i]);
				num2=parseInt(b[i]);
			}else if ( a[i].match(/[a-z]/g) || b[i].match(/[a-z]/g) ){
				num1=a[i];
				num2=b[i];
			}else{
				num1=parseInt(a[i]);
				num2=parseInt(b[i]);
			}

			if (num1 < num2) return ( 1 * flag );
			if (num1 > num2) return ( -1 * flag );
		}
		return (b.length - a.length) * flag;
	}

	function progressbar(v, m){
		var vn = parseInt(v) || 0;
		var mn = parseInt(m) || 100;
		var pc = ((100 / mn) * vn).toFixed(2);
		var wt = Math.floor(pc > 100 ? 100 : pc);
		var flow = getSize(vn).join(' ') + '/s';

		if (pc >= 90){
			var bkc = "rgb(255, 0, 0)";
		}else if(pc >= 60 && pc < 90){
			var bkc = "rgb(255, 255, 0)";
		}else{
			var bkc = "rgb(100, 255, 100)";
		}

		return String.format(
			'<div style="width:100%%; position:relative; border:1px solid #999999">' +
				'<div style="background-color: %s; width:%d%%; height:15px">' +
					'<div style="position:absolute; left:0; top:0; text-align:center; width:100%%; color:#000000">' +
						'<small>%s (%f%%)</small>' +
					'</div>' +
				'</div>' +
			'</div>', bkc, wt, flow, pc
		);
	}

	function registerTableEventHandlers() {
		// note these ordinals are into the data array, not the table output
		document.getElementById('thClient').addEventListener('click', function () {
			setSortColumn(this.id, 1, true); // hostname
		});
		document.getElementById('thMAC').addEventListener('click', function () {
			setSortColumn(this.id, 0, true); // MAC
		});
		document.getElementById('thDownload').addEventListener('click', function () {
			setSortColumn(this.id, 3, true); // dlspeed
		});
		document.getElementById('thUpload').addEventListener('click', function () {
			setSortColumn(this.id, 4, true); // ulspeed
		});
		document.getElementById('thTotalDown').addEventListener('click', function () {
			setSortColumn(this.id, 5, true); // total down
		});
		document.getElementById('thTotalUp').addEventListener('click', function () {
			setSortColumn(this.id, 6, true); // total up
		});
		document.getElementById('thTotal').addEventListener('click', function () {
			setSortColumn(this.id, 7, true); // total
		});
		document.getElementById('thFirstSeen').addEventListener('click', function () {
			setSortColumn(this.id, 8, true); // first seen
		});
		document.getElementById('thLastSeen').addEventListener('click', function () {
			setSortColumn(this.id, 9, true); // last seen
		});
	}

	function updateData() {
		var proto = document.getElementById('Select46').value;
		var status = {
			proto: proto,
			interval: interval
		}

		XHR.poll(interval, '<%=REQUEST_URI%>', status,
		function(x, info)
		{
			status.interval = interval;
			if (!info) {
				handleError();
			} else {
				var oldAllData = parseValues(info.rvdata, info.rvtime);
				DisplayTable(oldAllData);
				// set old values
				oldValues.cacheData.oldData = oldAllData[0];
				oldValues.cacheData.oldTotals = oldAllData[1];
				oldValues.cacheDate = info.rvtime;
				// update the html
				setSortColumn(null, null, false);
				document.getElementById('updated').innerHTML = '<%:Last updated %>' + dateToString(new Date()) +'<%:.%> ';
			}
		});
		updatePerSec();
	}

	function updatePerSec(){
		XHR.poll(1, '<%=REQUEST_URI%>', null,
		function(x)
		{
			var intervalMain = XHR._q[0].interval
			var sec = (intervalMain - (XHR._t - 1) % intervalMain) % intervalMain;
			setUpdateMessage('<%:Updating again in%> <b>' + sec + '</b> <%:seconds.%>');
			if(sec == 0){
				setTimeout(function(){
					setUpdateMessage('<%:Updating again in%> <b>' + interval + '</b> <%:seconds.%>');
				}, 50);
			}
		});
	}

	function setUpdateMessage(msg) {
		document.getElementById('updating').innerHTML = msg;
	}

	document.getElementById('intervalSelect').addEventListener('change', function () {
		interval = this.value;
		if (interval > 0) {
			// it is not scheduled, schedule it
			if (!XHR.running()) {
				XHR.run();
			}
			XHR._q[0].interval = interval;
		} else {
			// stop the scheduling
			XHR.halt();
			setUpdateMessage('');
		}
	});

	document.getElementById('resetDatabase').addEventListener('click', function () {
		if (confirm('<%:This will delete the database file. Are you sure?%>')) {
			new XHR().post('<%=REQUEST_URI%>',{reset:1},
			function(xhr) {
				document.location.reload();
			})
		}
	});

	document.getElementById('setBD').addEventListener('input', function () {
		var tb = document.getElementById("checkBD");
		var strTest = (/^[0-9]+\.?[0-9]*[\s]*[KMGTP]?$/g).test(this.value);

		if (strTest) {
			tb.innerHTML= '&#10004';
		}
		else{
			tb.innerHTML= '&#10006';
		}
	});

	document.getElementById('setBD').addEventListener('blur', function () {
		var tb = document.getElementById("checkBD");
		var bandwidth = parseSize(this.value);

		if (bandwidth == -1) {
		   alert('Error! Bandwidth reset!!!');
		   this.value = '1M';
		   bandwidth = 1048576;
		}
		tb.innerHTML= "";
	});

	document.getElementById('Select46').addEventListener('change', function () {
		var selection = this.value;
		oldValues = {
			cacheData: {
				oldData:   [],
				oldTotals: ""
			},
			cacheDate: ""
		};

		XHR._q[0].data={
			proto: selection,
			interval: interval
		};
	});

	document.getElementById('isShow').addEventListener('click', function () {
		if ( this.checked == true ){
			isShowZero = 1
		}else{
			isShowZero = 0
		}
	});

	function setSortColumn(eltid, col, do_sort = false) {
		if (col != null ) {
			if ( col == sortedColumn ) {
				if (sortDirection == "desc")
					sortDirection = "asc";
				else
					sortDirection = "desc";
			}
			else {
				sortDirection = "desc";
			}
		}

		sortedColumn = col != null ? col : sortedColumn;
		sortedEltId = eltid ? eltid : sortedEltId;
		if (do_sort){
			var oldData = oldValues.cacheData.oldData;
			var oldTotals = oldValues.cacheData.oldTotals;
			oldData.sort(sortingFunction);
			DisplayTable([oldData, oldTotals]);
		}
		e = document.getElementById(sortedEltId);
		if (e) e.innerHTML += (sortDirection == "asc" ? "&#x25B2" : "&#x25BC");
		registerTableEventHandlers();
	}

	// if dependency is successful run callback
	function checkForDependency() {
		XHR.get('<%=REQUEST_URI%>', { checkdency: 1} , function(x, data) {
			if (!data) {
				alert("<%:wrtbwmon is not installed!%>");
			}
		});
	}

	function initDefFile(){
		XHR.get('<%=REQUEST_URI%>', { defFile: 1 }, function(x, data) {
			if (data) {
				var HostData = (data.replace(/(^\s*)|(\s*$)/g, "")).split(/\r?\n|\r/g);
				for ( i = 0; i < HostData.length; i++) {
					defArr.push(HostData[i].split(','));
				}
			}
		});
	}

	function initLeasesFile(){
		XHR.get('<%=REQUEST_URI%>', { leasesFile: 1 }, function(x, data) {
			if (data) {
				for (i = 0; i < data.length; i++){
					leasesArr.push([data[i].macaddr,data[i].hostname]);
				}
			}
		});
	}

	initDefFile();
	checkForDependency();
	updateData();
	return 0;

})();

//]]></script>

<%+footer%>

