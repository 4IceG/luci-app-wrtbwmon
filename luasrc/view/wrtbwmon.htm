<%#
 Licensed to the public under the Apache License 2.0.
-%>

<%
	local fs = require "nixio.fs"
	local stat = require "luci.tools.status"
	local cursor = luci.model.uci.cursor()
	local db_path = cursor:get("wrtbwmon", "general", "path")
	local cmd_S = "wrtbwmon -b -46 -f " .. db_path .. " -p /tmp/usage.htm -u /etc/wrtbwmon.user >> /dev/null 2>&1 &"

	if luci.http.formvalue("defFile") == "1" then

		local def = tostring(
			fs.readfile("/etc/wrtbwmon.user")) or ""

		luci.http.prepare_content("application/json")
		luci.http.write_json(def)

		return

	elseif luci.http.formvalue("leasesFile") == "1" then

		local leases = stat.dhcp_leases(),

		luci.http.prepare_content("application/json")
		luci.http.write_json(leases)

		return

	elseif  luci.http.formvalue("checkdency") == "1" then

		if require("luci.model.ipkg").installed("wrtbwmon") then
			luci.http.prepare_content("application/json")
			luci.http.write_json("1")
		end

		return

	elseif  luci.http.formvalue("ipv4") == "1" then

		local cmd_P = "wrtbwmon -4 -f " .. db_path
		if not nixio.fs.access("/var/run/wrtbwmon.pid") then
			luci.sys.call(cmd_S)
		else
			luci.sys.call(cmd_P)
		end
		luci.http.prepare_content("application/json")
		luci.http.write_json(luci.sys.exec("cat " .. db_path))

		return

	elseif  luci.http.formvalue("ipv6") == "1" then

		local cmd_P = "wrtbwmon -6 -f " .. db_path
		if not nixio.fs.access("/var/run/wrtbwmon.pid") then
			luci.sys.call(cmd_S)
		else
			luci.sys.call(cmd_P)
		end
		luci.http.prepare_content("application/json")
		luci.http.write_json(luci.sys.exec("cat " .. db_path .. "6"))

		return
--[[
   elseif  luci.http.formvalue("ipv46") == "1" then

		local cmd_P = "wrtbwmon -46 -f " .. db_path
		if not nixio.fs.access("/var/run/wrtbwmon.pid") then
			luci.sys.call(cmd_S)
		else
			luci.sys.call(cmd_P)
		end
		luci.http.prepare_content("application/json")
		luci.http.write_json(luci.sys.exec("cat " .. db_path .. "46"))

		return
]]--
	elseif  luci.http.formvalue("reset") == "1" then

		local ret = luci.sys.call("wrtbwmon -f " .. db_path .. " && rm " .. db_path .. " && rm " .. db_path .. "6")
		return

	end
-%>

<%+header%>

<fieldset class="cbi-section">

	<legend><%:Usage - Details%></legend>

	<div style="overflow:hidden; border-bottom:1px solid #d4dde4">
		<div style="width:30%; float:left;">
			<select id="Select46" >
				<option value="ipv4"  selected="selected" >ipv4</option>
				<option value="ipv6">ipv6</option>
				<!--option value="ipv46">ipv6 && ipv6</option-->
			</select>
		</div>

		<div style="width:30%; float:left;">
			<label for="isShow" style="vertical-align:middle;"><%:Show Zeros%></label>
			<input id="isShow" type="checkbox" name="showing" style="vertical-align:middle;"/>
		</div>

		<div style="width:30%; float:left;">
			<label><%:Bandwidth%></label>
			<input type="text" id="setBD" value="1M" />
			<label id="checkBD"></label>
		</div>

		<div style="width 10%;float:right;">
			<input id="resetDatabase" type="button" class="cbi-button" style="right: 0;bottom: 0;" value="<%:Reset Database%>" >
		</div>
	</div>

	<div style="overflow:hidden;">
		<div style="width:70%; float:left;">
			<small>
				<span id="updated"></span><span id="updating"></span>
			</small>
		</div>

		<div style="width:30%; float:right; right:0;text-align:right;">
			<label>
				<small><%:Auto update every%></small>
				<select id="intervalSelect" style="float:right;width:80px;height:20px;font-size:11px;">
					<option value="-1"><%:Disabled%></option>
					<option value="1"><%:1 second%></option>
					<option value="2"  selected="selected"><%:2 seconds%></option>
					<option value="5"><%:5 seconds%></option>
					<option value="10"><%:10 seconds%></option>
					<option value="20"><%:20 seconds%></option>
					<option value="30"><%:30 seconds%></option>
					<option value="40"><%:40 seconds%></option>
					<option value="50"><%:50 seconds%></option>
					<option value="60"><%:60 seconds%></option>
					<option value="120"><%:2 minutes%></option>
					<option value="180"><%:3 minutes%></option>
				</select>
			</label>
		</div>
	</div>

	<div>
		<table>
		<caption><label id="updown"></label></br><label id="progress"></label></caption>
			<tbody id="tableBody"><tr><td><%:Loading...%></td></tr></tbody>
		</table>
	</div>
</fieldset>

<script type="text/javascript">//<![CDATA[

var interval = document.getElementById('intervalSelect').value;
var sortedColumn = 7, sortedEltId = "thTotal", sortDirection = "desc";

(function () {
	var oldValues={};
	var defArr = [], leasesArr = [];
	var bandwidth = 1000000;
	var isShowZero = 0;

	//Get the html page path
	var re = /(.*?admin\/network\/[^/]+)/;
	var basePath = ('<%=REQUEST_URI%>').match(re)[1];

	function getSize(size) {
		var prefix = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z'];
		var precision, base = 1000, pos = 0;
		while (size > base) {
			size /= base;
			pos++;
		}
		if (pos > 1) precision = 100; else precision = 1;
		return (Math.round(size * precision) / precision) + ' ' + prefix[pos] + 'B';
	}

	function getSize1(size) {
		var prefix = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z'];
		var precision, base = 1000, pos = 0;
		while (size > base) {
			size /= base;
			pos++;
		}
		if (pos > 1) precision = 100; else precision = 1;
		return [ Math.round(size * precision) / precision , prefix[pos] + 'B' ];
	}

	function dateToString(date) {
		return date.toLocaleString().replace(/(^\s*)|(\s*$)/g, "");
	}

	function isArray(obj) {
		return obj instanceof Array;
	}

	function handleError() {
		// TODO handle errors
		// var message = 'Something went wrong...';
	}

	function handleValues(values) {
		if (!isArray(values)) return '';
		// find data

		var data = [], totals = [0, 0, 0, 0, 0];
		for (var i = 0; i < values.length; i++) {
			var d = handleRow(values[i]);
			if (d) {
				data.push(d);
				// get totals
				for (var j = 0; j < totals.length; j++) {
					totals[j] += parseInt(d[3 + j]);
				}
			}
		}

		data.sort(sortingFunction);

		return [data, totals];
	}

	function handleRow(data) {
		// check if data is array
		if (!isArray(data)) return [''];

		data = parseHostname(data);

		// extract old data
		var oldData, oldDate, oldRow;
		if (oldValues.cacheData){
			oldData = oldValues.cacheData[0];
			oldDate = oldValues.cacheDate;
		}else{
			oldData = [];
			oldDate = [];
		}

		// find old corresopnded row data
		for (var i = 0; i < oldData.length; i++) {
			var cur = oldData[i];
			// compare mac addresses and ip addresses
			if (oldData[i][0] === data[0] && oldData[i][1] === data[1]) {
				oldRow = cur;
				break;
			}
		}

		// caculate download and upload speeds
		var dlSpeed = 0, upSpeed = 0;
		if (oldRow) {
			var now = new Date(),
			seconds = (now - oldDate) / 1000;
			dlSpeed = (data[3] - oldRow[5]) / seconds;
			upSpeed = (data[4] - oldRow[6]) / seconds;
		}

		// create rowData
		var rowData = [];
		for (var j = 0; j < data.length; j++) {
			rowData.push(data[j]);
			if (j === 2) {
				rowData.push(dlSpeed.toString(), upSpeed.toString());
			}
		}

		return rowData;
	}

	function DisplayTable(allData){
		data = allData[0];
		totals = allData[1];
		// display data
		var result =
			createTH('<%:Clients%>', {id: 'thClient', width: '17%'}) +
			createTH('<%:MAC%>', {id: 'thMAC', width: '10%'}) +
			createTH('<%:Download%>', {id: 'thDownload', width: '8%'}) +
			createTH('<%:Upload%>', {id: 'thUpload', width: '8%'}) +
			createTH('<%:Total Down%>', {id: 'thTotalDown', width: '9%'}) +
			createTH('<%:Total Up%>', {id: 'thTotalUp', width: '9%'}) +
			createTH('<%:Total%>', {id: 'thTotal', width: '9%'}) +
			createTH('<%:First Seen%>', {id: 'thFirstSeen', width: '15%'}) +
			createTH('<%:Last Seen%>', {id: 'thLastSeen', width: '15%'});
		result = createTR(result);

		for (var k = 0; k < data.length; k++) {
			// create displayRow
			var displayRow =
				creatTD(data[k][2] + '<br />' + data[k][1], {title: data[k][1], align: "middle"}) +
				creatTD(data[k][0], {align: "middle"}) +
				creatTD(getSize(data[k][3]) + '/s', {align: "middle"}) +
				creatTD(getSize(data[k][4]) + '/s', {align: "middle"}) +
				creatTD(getSize(data[k][5]), {align: "middle"}) +
				creatTD(getSize(data[k][6]), {align: "middle"}) +
				creatTD(getSize(data[k][7]), {align: "middle"}) +
				creatTD(data[k][8], {align: "middle"}) +
				creatTD(data[k][9], {align: "middle"});

			result += createTR(displayRow);
		}

		var totalsRow =
		createTH('<%:TOTAL%>',{}) +
		createTH(data.length + ' <%:Clients%>',{});

		for (var m = 0; m < totals.length; m++) {
			totalsRow += creatTD(getSize(totals[m]) + (m < 2 ? '/s' : ''), {align: "middle"});
		}
		result += createTR(totalsRow);

		generateProcessBar(totals[0],totals[1],bandwidth);

		document.getElementById('tableBody').innerHTML = result;
		return 0;
	}

	function registerTableEventHandlers() {
		// note these ordinals are into the data array, not the table output
		document.getElementById('thClient').addEventListener('click', function () {
			setSortColumn(this.id, 1, true); // hostname
		});
		document.getElementById('thMAC').addEventListener('click', function () {
			setSortColumn(this.id, 0, true); // MAC
		});
		document.getElementById('thDownload').addEventListener('click', function () {
			setSortColumn(this.id, 3, true); // dlspeed
		});
		document.getElementById('thUpload').addEventListener('click', function () {
			setSortColumn(this.id, 4, true); // ulspeed
		});
		document.getElementById('thTotalDown').addEventListener('click', function () {
			setSortColumn(this.id, 5, true); // total down
		});
		document.getElementById('thTotalUp').addEventListener('click', function () {
			setSortColumn(this.id, 6, true); // total up
		});
		document.getElementById('thTotal').addEventListener('click', function () {
			setSortColumn(this.id, 7, true); // total
		});
		document.getElementById('thFirstSeen').addEventListener('click', function () {
			setSortColumn(this.id, 8, true); // first seen
		});
		document.getElementById('thLastSeen').addEventListener('click', function () {
			setSortColumn(this.id, 9, true); // last seen
		});
	}

	function parseHostname(data){
		var flag;

		for (var i = 0; i < defArr.length; i++) {

			// Get the HostName
			if (defArr[i][0] === data[0]) {
				data[2] = defArr[i][1];
				flag = 1;
				break;
			}
		}

		if (!flag){
			for (var i = 0; i < leasesArr.length; i++) {

			// Get the HostName
				if (leasesArr[i][0] === data[0]) {
					if (!leasesArr[i][1]){
						data[2] = data[0];
					}else{
						data[2] = leasesArr[i][1];
					}
					flag = 1;
					break;
				}
			}
		}

		if (!flag){
			data[2] = data[0];
		}
		return data;
	}

	function creatTD(content, opts){
		opts = opts || {};
		var res = '<td';
		if (opts.title) {
			res += ' title="' + opts.title + '"';
		}
		res += ' class="td ';
		if (opts.align) {
			//res += ' align="' + opts.align + '"';
			res += ' ' + opts.align + '">' ;
		}else{
			res += '">';
		}
		res += content;
		res += '</td>';
		return res;
	}

	function createTH(content, opts) {
		opts = opts || {};
		var res = '<th';
		if (opts.title) {
			res += ' title="' + opts.title + '"';
		}
		if (opts.id) {
			res += ' id="' + opts.id + '"';
		}
		if (opts.width) {
			res += ' style="width:' + opts.width + '"';
		}
		res += ' class="th';
		if (opts.align) {
			//res += ' align="' + opts.align + '"';
			res += ' ' + opts.align + '">' ;
		}else{
			res += '">';
		}
		res += content ;
		res += '</th>';
		return res;
	}

    function createTR(content) {
   		var res = '<tr';
		res += ' class="tr">';
		res += content;
		res += '</tr>';

		return res;
	}

	function sortingFunction(x,y){
		var byCol,byDirection
		if (  x[sortedColumn] == y[sortedColumn] ){
			if (  x[7] != 0 || y[7] !=0 ) {
				byCol = 7
				byDirection = "desc"
			}else {
				byCol = 0
				byDirection = "asc"
			}
		}
		else{
			byCol = sortedColumn
			byDirection = sortDirection
		}

		var n1 =  x[byCol],n2 = y[byCol];
		var a = n1.split(/[^\w\d]/g),b = n2.split(/[^\w\d]/g);
		var flag = ( byDirection =="desc" ? 1 : -1);

		var tag=""
		if ( n1.match(/\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}/i) ){
			tag = "MAC"
		}
		else if ( n1.match(/\d+\.\d+\.\d+\d+/i) ){
			tag = "IP"
		}

		for (i = 0 ; i < a.length ; i++ ){
			if ( tag == "MAC" ){
				num1=parseInt(a[i],16);
				num2=parseInt(b[i],16);
			}else if ( tag == "IP" ){
				num1=parseInt(a[i]);
				num2=parseInt(b[i]);
			}else if ( a[i].match(/[a-zA-Z]/ig) || b[i].match(/[a-zA-Z]/ig) ){
				num1=a[i];
				num2=b[i];
			}else{
				num1=parseInt(a[i]);
				num2=parseInt(b[i]);
			}

			if (num1 < num2) return ( 1 * flag );
			if (num1 > num2) return ( -1 * flag );
		}
		return 0;
	}

	function generateProcessBar( downTotal , upTotal , bandwidth ){
		var downSpeed = getSize1(downTotal);
		var downSign = '<img src="<%=resource%>/cbi/down.gif" alt="&#8679" align="center"/>';
		var upSpeed = getSize1(upTotal);
		var upSign = '<img src="<%=resource%>/cbi/up.gif" alt="&#8681" align="center"/>';
		var updownSign = downSpeed[0] + downSpeed[1] + '/s' + downSign + upSpeed[0] + upSpeed[1] + '/s' + upSign;
		var percentVar = ( downTotal/bandwidth*100 ).toFixed(2);
		var processBar = '<progress style="width:100%;" value=' + percentVar + ' max=' + 100 +
					' title=' + percentVar + '%' + ' ></progress>';
		document.getElementById('updown').innerHTML = updownSign;
		document.getElementById('progress').innerHTML = processBar;
	}

	function updateData() {
		var sel= document.getElementById('Select46').value
		var ipvData;
		if (sel == "ipv4") {
			ipvData={
				ipv4: 1,
				ipv6: 0//,
//                ipv46:0
			};
		}
		else if(sel == "ipv6"){
			ipvData={
				ipv4: 0,
				ipv6: 1//,
//                ipv46:0
			};
		}
/*        else if(sel == "ipv46"){
			ipvData={
				ipv4: 0,
				ipv6: 0,
				ipv46:1
			};
		}*/

		XHR.poll(interval, basePath, ipvData,
		function(x, values)
		{
			if (!values) {
				handleError();
			} else {
				var allRows = values.split(/\r?\n|\r/g);
				allRows.shift();
				allRows.pop();
				var  valArr = [];
				for (var i = 0; i < allRows.length ; i++) {
					var rowCells = allRows[i].split(',');

					if ( isShowZero ) {
						 valArr.push(rowCells);
					}else if ( parseInt(rowCells[5]) != 0 ) {
						 valArr.push(rowCells);
					}
				}
				var oldAllData = handleValues(valArr);
				DisplayTable(oldAllData);
				// set old date
				var oldDate = new Date();
				//set old values
				oldValues = {cacheData: oldAllData, cacheDate: oldDate};
				setSortColumn(null, null, false);
				document.getElementById('updated').innerHTML = '<%:Last updated %>' + dateToString(oldDate) +'<%:.%> ';
				initLeasesFile();
				if(XHR._q.length>1){
					XHR._q.splice(1,XHR._q.length-1);
				}
				updateLable();
			}
		});
	}

	function updateLable(){
		XHR.poll(1, basePath, null,
		function(x, data)
		{
			var intervalMain = XHR._q[0].interval
			var sec = intervalMain-(XHR._t-1)%intervalMain;
			setUpdateMessage('<%:Updating again in%> <b>' + sec + '</b> <%:seconds.%>');
		});
	}

	function setUpdateMessage(msg) {
		document.getElementById('updating').innerHTML = msg;
	}

	document.getElementById('intervalSelect').addEventListener('change', function () {
		interval = this.value;
		if (interval > 0) {
			// it is not scheduled, schedule it
			if (!XHR.running()) {
				XHR.run();
			}
			XHR._q[0].interval = interval;
		} else {
			// stop the scheduling
			XHR.halt();
			setUpdateMessage('');
		}
	});

	document.getElementById('resetDatabase').addEventListener('click', function () {
		if (confirm('<%:This will delete the database file. Are you sure?%>')) {
			new XHR().post(basePath,{reset:1},
			function(xhr) {
				document.location.reload();
			})
		}
	});

	document.getElementById('setBD').addEventListener('input', function () {
		var tb = document.getElementById("checkBD");
		var strTest = (/^[0-9]+\.?[0-9]*[KMGTP]?$/g).test(this.value);

		if (strTest) {
			tb.innerHTML= '&#10004';
		}
		else{
			tb.innerHTML= '&#10006';
		}
	});

	document.getElementById('setBD').addEventListener('blur', function () {
		var tb = document.getElementById("checkBD");
		var strTest = (/^[0-9]+\.?[0-9]*[KMGTP]?$/g).test(this.value);

		if (strTest) {
			var num = (this.value).match(/^[0-9]+\.?[0-9]*/g);
			var base = (this.value).match(/[KMGTP]?$/);
			var unitBD = ["" , "K","M" , "G","T" , "P"]
			if(!num){
				bandwidth = 1000000;
			}else{
				for (i = 0; i < unitBD.length; i++){
					 if (base == unitBD[i]){
						 base = 1000**i;
						 break;
					 }
					 if (!base)
						 base = 1;
				}
				this.value = parseFloat(num) + unitBD[i];
				bandwidth = Math.round(parseFloat(num) * base);
			}
		}
		else{
		   alert('Error! Bandwidth reset!!!');
		   this.value = '1M';
		   bandwidth = 1000000;
		}
		tb.innerHTML= "";
	});

	document.getElementById('Select46').addEventListener('change', function () {
		var selection = this.value;

		if (selection == "ipv4") {
			oldValues = {};
			XHR._q[0].data={
				ipv4: 1,
				ipv6: 0//,
//                ipv46:0
			};
		}
		else if(selection == "ipv6"){
			oldValues = {};
			XHR._q[0].data={
				ipv4: 0,
				ipv6: 1//,
//                ipv46:0
			};
		}
/*        else if(selection == "ipv46"){
			XHR._q[0].data={
				ipv4: 0,
				ipv6: 0,
				ipv46:1
			};
		}*/

	});

	document.getElementById('isShow').addEventListener('click', function () {
		if ( this.checked == true ){
			isShowZero = 1
		}else{
			isShowZero = 0
		}
	});

	function setSortColumn(eltid, col, do_sort = false) {
		if (col != null ) {
			if ( col == sortedColumn ) {
				if (sortDirection == "desc")
					sortDirection = "asc";
				else
					sortDirection = "desc";
			}
			else {
				sortDirection = "desc";
			}
		}

		sortedColumn = col != null ? col : sortedColumn;
		sortedEltId = eltid ? eltid : sortedEltId;
		if (do_sort)
			oldValues.cacheData[0].sort(sortingFunction);
			DisplayTable(oldValues.cacheData);
		e = document.getElementById(sortedEltId);
		if (e)
			e.innerHTML += (sortDirection == "asc" ? "&#x25B2" : "&#x25BC");
		registerTableEventHandlers();
	}

	// if dependency is successful run callback
	function checkForDependency() {
		XHR.get(basePath, { checkdency: 1} , function(x, data) {
			if (!data) {
				alert("<%:wrtbwmon is not installed!%>");
			}
		});
	}

	function initDefFile(){
		XHR.get(basePath, { defFile: 1 }, function(x, data) {
			if (data) {
				var HostData = data.split(/\r?\n|\r/g);
				for ( i = 0; i < HostData.length; i++) {
					defArr.push(HostData[i].split(','));
				}
			}
		});
	}

	function initLeasesFile(){
		XHR.get(basePath, { leasesFile: 1 }, function(x, data) {
			if (data) {
				for (i = 0; i < data.length; i++){
					leasesArr.push([data[i].macaddr,data[i].hostname]);
				}
			}
		});
	}

	initDefFile();
	checkForDependency();
	updateData();
	return 0;

})();

//]]></script>

<%+footer%>

