<%#
 Licensed to the public under the Apache License 2.0.
-%>

<%
	local fs = require "nixio.fs"
	local stat = require "luci.tools.status"
	local cursor = luci.model.uci.cursor()
	local rv = {
		db = cursor:get("wrtbwmon", "general", "path"),
		uptime = nil,
		data = {},
	}

--	Function to update the mac-hostname table.
	function getmactable()
		local mactable = {}
		local leases = stat.dhcp_leases()

		if fs.access("/etc/wrtbwmon.user") then
			for line in io.lines("/etc/wrtbwmon.user") do
				local macpair={}
				setmetatable(macpair, {__index = table.insert})
				line:gsub("[^,]+", macpair)
				macpair.__index = nil
				mactable[macpair[1]:lower()] = macpair[2]
			end
		end

		for _, line in ipairs(leases) do
			if not mactable[line.macaddr:lower()] then
				mactable[line.macaddr:lower()] = line.hostname
			end
		end

		return mactable
	end

--	Rename the db file for ipv6.
	function fileRename(fileName, tag)
		local idx = fileName:match(".+()%.%w+$")
		if(idx) then
			return fileName:sub(1, idx-1) .. tag .. fileName:sub(idx, -1)
		else
			return fileName .. tag
		end
	end

	if luci.http.formvalue("proto") ~= nil then
		local cmd_setup = "/etc/init.d/wrtbwmon restart"
		local cmd_update = nil
		local interval = tonumber(luci.http.formvalue("interval")) or 0
		local uptime = tonumber(luci.sys.exec("cat /proc/uptime | awk '{print $1}'"))  or 0
		local db = nil
		local mactable = getmactable()

--		Update the database.
		if  luci.http.formvalue("proto") == "ipv4" then
			cmd_update = "wrtbwmon -4 -f " .. rv.db .. " >>/dev/null 2>&1"
			db = rv.db
		elseif  luci.http.formvalue("proto") == "ipv6" then
			cmd_update = "wrtbwmon -6 -f " .. rv.db .. " >>/dev/null 2>&1"
			db = fileRename(rv.db, ".6")
		end
		os.execute(cmd_update)

--		Caculate the update time and update the database.
		if nixio.fs.access("/var/log/wrtbwmon.log") then
			uptime = tonumber(luci.sys.exec("awk -F, '{print $1}' /var/log/wrtbwmon.log"))
		end
		rv.uptime = uptime

--		Process the database.
		for line in io.lines(db) do
			local usageeach={}
			setmetatable(usageeach, {__index = table.insert})
			line:gsub("[^,]+", usageeach)
			usageeach.__index = nil
			usageeach[1]=usageeach[1]:lower()

			if mactable[usageeach[1]] then
				usageeach[3] = mactable[usageeach[1]]
			else
				usageeach[3] = usageeach[1]
			end

			(rv.data)[#(rv.data)+1] = usageeach
		end

--		Setup the background update process.
		if not nixio.fs.access("/var/run/wrtbwmon.pid") then
			io.popen(cmd_setup)
		end

--		Transfer the database to js.
		local result = {
			uptime = rv.uptime,
			data = rv.data,
		}

		luci.http.prepare_content("application/json")
		luci.http.write_json(result)

		return
	end

	if luci.http.formvalue("UpdateLable") == "1" then
		luci.http.status(200, "OK")
		return
	end

	if  luci.http.formvalue("reset") == "1" then
		luci.sys.call("rm -f " .. fileRename(rv.db, "*") .. " && wrtbwmon -46 -f " .. rv.db .. " >>/dev/null 2>&1")
		luci.sys.call("ip -4 neigh flush dev br-lan && ip -6 neigh flush dev br-lan")
		luci.http.status(200, "OK")
		return
	end
-%>

<%+header%>

<style>
	.showMore.hide {
		display: none;
	}

	.tr.table-totals {
		background: #eee !important;
	}
</style>

<div class="cbi-map">
	<h2><%:Usage - Details%></h2>

	<div class="cbi-section">
		<div class="table">
			<div class="tr">
				<div class="td left" style="width:10%">
					<label><%:protocol:%></label>
				</div>
				<div class="td left" style="width:30%">
					<select id="Select46" style="width:auto">
						<option value="ipv4"  selected="selected" >ipv4</option>
						<option value="ipv6">ipv6</option>
					</select>
				</div>
				<div class="td left" style="width:10%">
					<label for="isShow" style="vertical-align:middle;"><%:Show Zeros:%></label>
				</div>
				<div class="td left" style="width:30%">
					<input id="isShow" type="checkbox" name="showing" style="vertical-align:middle;"/>
				</div>
				<div class="td right">
					<input id="resetDatabase" type="button" class="cbi-button" value="<%:Reset Database%>" >
				</div>
			</div>
			<div class="tr">
				<div class="td left" style="width:10%"><label><%:bandwidth:%></label></div>
				<div class="td left" style="width:30%">
					<input type="text" id="setBD" value="1M" />
					<label id="checkBD"></label>
				</div>
				<div class="td left" style="width:10%">
					<label for="showMore" style="vertical-align:middle;"><%:Show More:%></label>
				</div>
				<div class="td left" style="width:30%">
					<input id="showMore" type="checkbox" name="showing" style="vertical-align:middle;"/>
				</div>
				<div class="td"></div>
			</div>
		</div>
	</div>

	<div class="cbi-section">
		<div class="table">
			<div class="tr">
				<div class="td left" style="width:70%">
					<small><div id="updated" style="display:inline"></div><div id="updating" style="display:inline"></div></small>
				</div>
				<div class="td right" style="width:30%">
					<label for="intervalSelect"><%:Auto update every%></label>
					<select id="intervalSelect">
						<option value="-1"><%:Disabled%></option>
						<option value="1"><%:1 second%></option>
						<option value="2"  selected="selected"><%:2 seconds%></option>
						<option value="5"><%:5 seconds%></option>
						<option value="10"><%:10 seconds%></option>
						<option value="20"><%:20 seconds%></option>
						<option value="30"><%:30 seconds%></option>
						<option value="60"><%:60 seconds%></option>
						<option value="120"><%:2 minutes%></option>
					</select>
				</div>
			</div>
		</div>

		<div class="table">
			<div class="tr"><div class="td left" style="width:10%"><%:downflow:%></div><div class="td left" id="downflow">-</div></div>
			<div class="tr"><div class="td left" style="width:10%"><%:upflow:%></div><div class="td left" id="upflow">-</div></div>
		</div>

		<div class="table" id="targetTable">
			<div class="tr table-titles">
				<div class="th" id="thClient" style="width:17%"><%:Clients%></div>
				<div class="th showMore hide" id="thMAC" style="width:10%"><%:MAC%></div>
				<div class="th" id="thDownload" style="width:8%"><%:Download%></div>
				<div class="th" id="thUpload" style="width:8%"><%:Upload%></div>
				<div class="th" id="thTotalDown" style="width:9%"><%:Total Down%></div>
				<div class="th" id="thTotalUp" style="width:9%"><%:Total Up%></div>
				<div class="th" id="thTotal" style="width:9%"><%:Total%></div>
				<div class="th showMore hide" id="thFirstSeen" style="width:15%"><%:First Seen%></div>
				<div class="th showMore hide" id="thLastSeen" style="width:15%"><%:Last Seen%></div>
			</div>
			<div class="tr placeholder">
				<div class="td"><em><%:Collecting data...%></em></div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">//<![CDATA[

(function () {
	var scheduleTimeout, updateTimeout, isScheduled = true;
	var bandwidth = parseSize("1M"), isShowZero = 0, showMore = false;
	var interval = document.getElementById('intervalSelect').value;
	var sortedColumn = 6, sortDirection = "desc";
	var pairNum = {thClient: 9, thMAC: 1, thDownload: 2, thUpload: 3, thTotalDown: 4,
				thTotalUp: 5, thTotal: 6, thFirstSeen: 7, thLastSeen: 8,};
	var oldValues = {
			cacheData: 	[],
			cacheSaved:	[],
			cacheDate:  ""
	};

	function getSize(size) {
		var prefix = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z'];
		var precision, base = 1024, pos = 0;
		while (size > base) {
			size /= base;
			pos++;
		}
		if (pos > 1) precision = 100; else precision = 1;
		return Math.round(size * precision) / precision + ' ' + prefix[pos] + 'B' ;
	}

	function parseSize(size){
		var strTest = (/^[0-9]+\.?[0-9]*[\s]*[KMGTP]?B?(\/s)?$/g).test(size);
		if (!strTest) {
			return -1;
		}else{
			var num = (size).match(/^[0-9]+\.?[0-9]*/g);
			var base = (size).match(/[KMGTP]/i);
			var unitBD = ["" , "K", "M", "G", "T", "P"]
			for (var i = 0; i < unitBD.length; i++){
				if (base == unitBD[i]){
					base = 1024**i;
					break;
				}
				if (!base)
					base = 1;
			}
			return Math.round(parseFloat(num) * base);
		}
	}

	function dateToString(date) {
		return date.toLocaleString().replace(/(^\s*)|(\s*$)/g, "");
	}

	function isArray(obj) {
		return obj instanceof Array;
	}

	function handleError() {
		// TODO handle errors
		// var message = 'Something went wrong...';
	}

	function parseValues(values, now){
		// check if data is array
		if (!isArray(values)) return [''];

		values.shift(); //Remove the first line.

		var valArr = [], totals = [0, 0, 0, 0, 0];
		var rowNum = values.length;
		for (var i = 0; i < rowNum ; i++) {

			if ( isShowZero || parseInt(values[i][5]) != 0 ) {
				var rowArr = handleRow(values[i], now);
				valArr.push(rowArr);

				for (var j = 0; j < totals.length; j++) {
					totals[j] += parseInt(rowArr[2 + j]);
				}
			}
		}

		return [valArr, totals];
	}

	function handleRow(data, now) {
		// check if data is array
		if (!isArray(data)) return [''];

		// extract old data
		var oldSaved = oldValues.cacheSaved;
		var oldDate = oldValues.cacheDate;
		var dlSpeed = 0, upSpeed = 0;
		if (oldSaved[data[0]]) {
			var seconds = ( now - oldDate ) || interval;
			dlSpeed = (data[3] - oldSaved[data[0]][0]) / seconds;
			upSpeed = (data[4] - oldSaved[data[0]][1]) / seconds;
		}

		oldValues.cacheSaved[data[0]] = [data[3], data[4]];
		data.splice(3, 0, dlSpeed.toString(), upSpeed.toString());

		return [].concat([data[2], data[0]], data.slice(3), [data[1]]);
	}

	function displayTable(values){
		values[0].sort(sortingFunction);
		var tb = document.getElementById('targetTable')
		// display data

//		console.time('update_table');
//		cbi_update_table(tb, data, '<em><%:Loading...%></em>');
		update_table(tb, values, '<em><%:Loading...%></em>');
//		console.timeEnd('update_table');

		document.getElementById('downflow').innerHTML = progressbar(values[1][0],bandwidth);
		document.getElementById('upflow').innerHTML = progressbar(values[1][1],bandwidth);
		return
	}

	function update_table(tb, values, placeholder) {
		var dom = document.createDocumentFragment(), nodeLen = tb.childElementCount - 2;
		var tabData = values[0], shadowNode, newNode, childTD, tabTitle = tb.firstElementChild;
		// Create the shadow node, which will be used in the following.
		if (tabData.length > nodeLen) {
			if (tb.childElementCount > 2) {
				shadowNode = tabTitle.nextElementSibling.cloneNode(true);
			} else {
				shadowNode = document.createElement('div');
				childTD = document.createElement('div');
				childTD.appendChild(document.createTextNode(''));
				for (var j = 0; j < tabTitle.children.length; j++) {
					shadowNode.appendChild(childTD.cloneNode(true));
					shadowNode.lastElementChild.className = 'td' + ((!showMore && '178'.indexOf(j) != -1 ? ' hide showMore' : ''));
					shadowNode.lastElementChild.setAttribute('data-title', tabTitle.children[j].innerHTML);
				}
				shadowNode.firstElementChild.appendChild(document.createElement('br'));
				shadowNode.firstElementChild.appendChild(document.createTextNode(''));
			}
		}
		// Update the table data.
		for (var i = 0; i < tabData.length; i++) {
			if (i < nodeLen) {
				dom.appendChild(tabTitle.nextElementSibling);
			} else {
				dom.appendChild(shadowNode.cloneNode(true));
				dom.lastElementChild.className = 'tr cbi-rowstyle-%d'.format(i % 2 ? 2 : 1);
			}
			newNode = dom.lastElementChild.firstElementChild;
			newNode.title = tabData[i][1];
			newNode.lastChild.nodeValue = tabData[i].slice(-1);
			for (var j = 0; j <tabTitle.childElementCount; j++, newNode = newNode.nextElementSibling){
				newNode.firstChild.nodeValue = ('23456'.indexOf(j) != -1 ? getSize(tabData[i][j]) : tabData[i][j])
								+ ('23'.indexOf(j) != -1  ? '/s' : '');
			}
		}
		// Remove the table data which has been deleted from the database.
		while (tb.childElementCount > 2) {
			tb.removeChild(tabTitle.nextElementSibling);
		}
		//Append the totals or placeholder row.
		dom.appendChild(tb.lastElementChild);
		newNode = dom.lastElementChild;
		if (newNode.classList.contains('table-totals')) {
			if (tabData.length == 0) {
				while (newNode.firstElementChild.firstChild.nextSibling) {
					newNode.removeChild(newNode.lastElementChild);
				};
				newNode.className = 'tr placeholder';
				newNode.firstChild.innerHTML = placeholder;
			}
		} else {
			if (tabData.length > 0) {
				dom.replaceChild(shadowNode.cloneNode(true), newNode);
				newNode = dom.lastElementChild;
				newNode.className = 'tr table-totals';
				while (newNode.firstElementChild.firstChild.nextSibling) {
					newNode.firstElementChild.removeChild(newNode.firstElementChild.lastChild);
				};
				newNode.firstElementChild.style.fontWeight = 'bold';
				newNode.firstElementChild.nextSibling.style.fontWeight = 'bold';
			}
		}

		if (newNode.classList.contains('table-totals')) {
			newNode.firstElementChild.firstChild.nodeValue = !showMore ? '<%:TOTAL%>: ' + tabData.length : '<%:TOTAL%>:';
			newNode.firstElementChild.nextSibling.firstChild.nodeValue = !showMore ? '' : tabData.length + ' <%:Clients%>';
			for (var j = 0; j < values[1].length; j++) {
				newNode.children[j+2].firstChild.nodeValue = getSize(values[1][j]) + (j < 2 ? '/s' : '');
			}
		}
		tb.appendChild(dom);
	}

	function sortingFunction(x, y){
		var byCol,byDirection = sortDirection;
		if (x[sortedColumn] == y[sortedColumn]){
			if (x[7] != y[7]) {
				byCol = 7;
			}else {
				byCol = 0;
			}
		}
		else{
			byCol = sortedColumn;
		}

		var n1 = (x[byCol]).toLowerCase(), n2 = (y[byCol]).toLowerCase();
		var a = n1.split(/[^\w\d]/g), b = n2.split(/[^\w\d]/g);
		var flag = ( byDirection =="desc" ? 1 : -1);
		var len = (a.length <= b.length ? a.length : b.length);

		var tag=""
		if ( n1.match(/\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}/i) ){
			tag = "MAC"
		}
		else if ( n1.match(/\d+\.\d+\.\d+\.\d+/i) ){
			tag = "IP"
		}

		for (var i = 0 ; i < len ; i++ ){
			if ( tag == "MAC" ){
				num1=parseInt(a[i],16);
				num2=parseInt(b[i],16);
			}else if ( tag == "IP" ){
				num1=parseInt(a[i]);
				num2=parseInt(b[i]);
			}else if ( a[i].match(/[a-z]/g) || b[i].match(/[a-z]/g) ){
				num1=a[i];
				num2=b[i];
			}else{
				num1=parseInt(a[i]);
				num2=parseInt(b[i]);
			}

			if (num1 < num2) return ( 1 * flag );
			if (num1 > num2) return ( -1 * flag );
		}
		return (b.length - a.length) * flag;
	}

	function progressbar(v, m){
		var vn = parseInt(v) || 0;
		var mn = parseInt(m) || 100;
		var pc = ((100 / mn) * vn).toFixed(2);
		var wt = Math.floor(pc > 100 ? 100 : pc);
		var flow = getSize(vn) + '/s';

		if (pc >= 95){
			var bkc = "rgb(248, 0, 16)";
		}else if(pc >= 80 && pc < 95){
			var bkc = "rgb(255, 0, 255)";
		}else if(pc >= 60 && pc < 80){
			var bkc = "rgb(255, 255, 0)";
		}else{
			var bkc = "rgb(100, 255, 100)";
		}

		return String.format(
			'<div style="width:100%%; position:relative; border:1px solid #999999">' +
				'<div style="background-color: %s; width:%d%%; height:15px">' +
					'<div style="position:absolute; left:0; top:0; text-align:center; width:100%%; color:#000000">' +
						'<small>%s (%f%%)</small>' +
					'</div>' +
				'</div>' +
			'</div>', bkc, wt, flow, pc
		);
	}

	function registerTableEventHandlers() {
		var tb = document.getElementById('targetTable');
		var e = tb.querySelector('.th');
		while(e) {
			e.addEventListener('click', function () {
				setSortColumn(this.id);
			});
			e = e.nextElementSibling;
		}

		document.getElementById('intervalSelect').addEventListener('change', function () {
			interval = this.value;
			if (interval > 0) {
				// it is not scheduled, schedule it
				if (!isScheduled) {
					reschedule(interval);
				}
			} else {
				// stop the scheduling
				stopSchedule();
			}
		});

		document.getElementById('resetDatabase').addEventListener('click', function () {
			if (confirm('<%:This will delete the database file. Are you sure?%>')) {
				new XHR().post('<%=REQUEST_URI%>',{reset: 1},
				function(xhr) {
					document.location.reload();
				})
			}
		});

		document.getElementById('setBD').addEventListener('input', function () {
			var tb = document.getElementById("checkBD");
			var strTest = (/^[0-9]+\.?[0-9]*[\s]*[KMGTP]?$/g).test(this.value);

			if (strTest) {
				tb.innerHTML = '&#10004';
			}
			else{
				tb.innerHTML = '&#10006';
			}
		});

		document.getElementById('setBD').addEventListener('blur', function () {
			var tb = document.getElementById("checkBD");
			var bandwidth = parseSize(this.value);

			if (bandwidth == -1) {
				alert('Error! Bandwidth reset!!!');
				this.value = '1M';
				bandwidth = 1048576;
			}
			tb.innerHTML= "";
		});

		document.getElementById('Select46').addEventListener('change', function () {
			var selection = this.value;
			oldValues = {
				cacheData: 	[],
				cacheSaved:	[],
				cacheDate:  ""
			};

			XHR._q[0].data={
				proto: selection,
				interval: interval
			};
		});

		document.getElementById('isShow').addEventListener('click', function () {
			if ( this.checked == true ){
				isShowZero = 1
			}else{
				isShowZero = 0
			}
		});

		document.getElementById('showMore').addEventListener('click', function () {
			var target = document.querySelector('.tr.table-totals').firstElementChild;
			target.firstChild.nodeValue = showMore ? '<%:TOTAL%>: ' + oldValues.cacheData[0].length : '<%:TOTAL%>:';
			target.nextElementSibling.firstChild.nodeValue = showMore ? '' : oldValues.cacheData[0].length + ' <%:Clients%>';
			if ( this.checked == true ){
				showMore = true;
				document.querySelectorAll('.showMore').forEach(function(e){
					if(e) e.classList.remove('hide');
				});
			}else{
				showMore = false;
				document.querySelectorAll('.showMore').forEach(function(e){
					if(e) e.classList.add('hide');
				});
			}
		});
	}

	function updateData(once) {
		var proto = document.getElementById('Select46').value;
		var label = document.getElementById('updated');
		var status = {
			proto: proto,
			interval: interval
		}

		XHR.get('<%=REQUEST_URI%>', status,function(x, info){
			if (!info) {
				handleError();
			} else {
				// set old values
				oldValues.cacheData = parseValues(info.data, info.uptime);
				oldValues.cacheDate = info.uptime;
				// update the html
				setSortColumn(null);
				label.innerHTML = '<%:Last updated %>' + dateToString(new Date()) +'<%:.%> ';

				if (!once && interval > 0) reschedule(interval);
			}
		});
	}

	function stopSchedule() {
		window.clearTimeout(scheduleTimeout);
		window.clearTimeout(updateTimeout);
		setUpdateMessage('');
		isScheduled = false;
	}

	function reschedule(seconds) {
		isScheduled = true;
		seconds = seconds || 60;
		updateSeconds(seconds);
		scheduleTimeout = window.setTimeout(updateData, seconds * 1000);
	}

	function setUpdateMessage(msg) {
		document.getElementById('updating').innerHTML = msg;
	}

	function updateSeconds(start) {
		setUpdateMessage('<%:Updating again in%> <b>' + start + '</b> <%:seconds.%>');
		if (start > 0) {
			updateTimeout = window.setTimeout(function () {
				updateSeconds(start - 1);
			}, 1000);
		}
	}

	function setUpdateMessage(msg) {
		document.getElementById('updating').innerHTML = msg;
	}

	function setSortColumn(eltid) {
		// Remove the old sorted sign.
		var sortedColumnIndex = Object.values(pairNum).indexOf(sortedColumn);
		var e = document.getElementById(Object.keys(pairNum)[sortedColumnIndex]);
		if (e){
			e.innerHTML = e.innerHTML.replace(/\u25B2|\u25BC/, '');
		}

		// Toggle the sort direction.
		if (eltid != null ) {
			if ( pairNum[eltid] == sortedColumn ) {
				if (sortDirection == "desc")
					sortDirection = "asc";
				else
					sortDirection = "desc";
			}
			else {
				sortDirection = "desc";
			}
		}

		// Get the new coloum to sort.
		sortedColumn = eltid != null ? pairNum[eltid] : sortedColumn;
		// Display the sorted values.
		displayTable(oldValues.cacheData);

		// Set the new sign for the sorting coloum.
		var sortedColumnIndex = Object.values(pairNum).indexOf(sortedColumn);
		var e = document.getElementById(Object.keys(pairNum)[sortedColumnIndex]);
		if (e){
				e.innerHTML += (sortDirection == "asc" ? "&#x25B2" : "&#x25BC");
		}
	}

	if (<%=luci.http.write_json(luci.sys.exec("opkg status wrtbwmon") == "")%>) {
		alert("<%:wrtbwmon is not installed!%>");
		return 0;
	}

	registerTableEventHandlers();
	updateData();
	return 0;
})();
//]]></script>

<%+footer%>

